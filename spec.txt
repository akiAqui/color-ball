# 環境:
- p5.jsを利用した2D描画シミュレーション
- 3次元の物理計算を行い、その結果を2次元に投影


# 板の定義:
- 三次元の厚みが0の板を想定
- 描画時は2次元の板として鉛直方向からの様子を描画する


# 球の定義:
- 半径の異なる球が異なる位置に存在
- 半径(r)、重さ(m)、色(c)、盤上に存在することを示すブーリアン(alive)を属性として持っている
- 板のローカル座標系での位置(x,y,z)、速度(vx,vy,vz)、加速度(ax,ay,az)とする。
- ただし、球は常に板の上に存在する限りz=0, vz=0, az=0である。
- 世界座標系での位置(s,t,u)、速度(vs,vt,vu)、加速度(as,at,au)とする


# 座標系:
- 板のローカル座標系を直交座標系(x,y,z)として定義する
- 板の横方向をx軸、縦方向をy軸、垂直方向をz軸とする
- 世界座標系を直交座標系(s,t,u)として定義する
- 板のローカル座標系と、世界座標系は常に原点を共有する


# 板の動き:
- 三次元の空間で板を傾けることが可能
- 直交座標系(x,y,z)を極座標系(r,θ,ω)の方位角θと天頂角ωを用いてu軸の位置を決定する


# 物理法則:
- 球に対しては重力が働く
- 板と球の間に摩擦は存在しない
- 位置エネルギー= mgt
- 運動エネルギー= 1/2(vs^2+vt^2+vu^2)
- 球に対してはエネルギー保存の法則が働く
- 球同士の衝突を含む干渉はなしとする


# 描画ルール:
- 球の通った経路はその球の持つ色のペンで上書き
- 球の半径に応じてペンの半径の大きさが決まる


# 板の傾き制御:
- 時間ｔ、方位角θ、天頂角ωで板の傾きを制御する
- 傾きの指定はオブジェクトの配列として与える
- 初期状態の定義から(0,0,0),(t1,θ1,ω1),(t2,θ2,ω2),...,(tn,θn,ωn)が配列の内容となる


# シミュレーション制御:
- t=0で球の初期状態設定、板は傾きのない状態から開始する
- t=tnでシミュレーションは終了する


# 球の挙動:
- 板の傾きに応じて力学法則に従って転がる
- 球の位置がローカルの直交座標系(x,y,z)板の端から落ちた球はそれ以降のシミュレーションに関与しない


# デバッグ機能:
- デバッグモード時にコンソールに出力
- debug, info, warningの3レベルを設定
- 特定の球に注目してデバッグ可能
 



# その他の考慮事項:
- パフォーマンスの最適化は考慮しない
- ユーザーインターフェースは不要、全てのパラメータはプログラム内で数値として管理


# 実装詳細:
- npm/npxを利用したプロジェクト管理
- ES2023仕様のJavaScriptを使用
- p5.jsのインスタンスモードを使用
- 2Dモードでの実装（3D計算を2Dに投影）

# 関数定義

## 球の初期設定関数()
{
  球の生成
  球の半径の初期設定関数() {
    この関数は半径に応じて質量も設定
    球の重さからペンの太さを決定
  }
  球の位置の初期設定関数
  球の初速度の初期設定関数
  球の色の初期設定関数
  板の最小シミュレーション時間での傾きの値をあらかじめ算出しておく関数
}



関数定義:
- 球の半径に応じたペンの太さを決定する関数
- 球の初期色を定義する関数
- 球の初期位置を設定する関数
- 球の初速度を設定する関数
- 球の初期状態を設定する関数


シミュレーション制御:
- t=0で球の初期状態設定、板は傾きのない状態から開始する
- t=tnでシミュレーションは終了する


球の挙動:
- 板の傾きに応じて力学法則に従って転がる
- 球の位置がローカルの直交座標系(x,y,z)板の端から落ちた球はそれ以降のシミュレーションに関与しない


グローバル変数設定
- dt: シミュレーション時間
- sm: シミュレーション・マネージャ


# クラス設計

## SimulationManager クラス
{
  constructor()
    デバッグフラグ設定  
    板のconstructor()
    全ての球のconstructor()
    全ての球の位置の設定()
    全ての球の初速度の設定()    
    全ての球の色の設定()
    デバッグ出力する球を設定
    showTime()
    debugBoard()    
    debugBall()

  update()
    板のupdate()
    alive=trueである全ての球のupdate()
  draw()
    alive=trueである全ての球のdraw()
  debugOutput()
    debugBall()
    debugBoard()

  showTime()
    シミュレーション時間を出力
  debugBall()
    球の位置、球の速度、球の加速度、球の色、球のalive状態を出力
  debugBoad()
    板の傾き
}

## Board クラス
{
  constructor()
    板の大きさを設定
    板の各シミュレーション時間における傾きの値を計算
    板の傾きを設定
    計算
  update()
    シミュレーション時間を更新
    新しいシミュレーション時間の板の傾きの算出
  draw(): 板の描画

}

## Ball クラス
{
  constructor()
    球の半径の設定
      最小値から最大値の間のランダムな半径を設定
    球の半径から容量を計算し、要領から質量を設定
    質量からペンの太さの設定
  update()
      球にかかる力の更新
        重力からかかる力の更新
      球の加速度の更新
      球の速度の更新
      球の位置の更新
      板の範囲から落ちる球の判定とalive属性の設定
  draw()
    alive=trueである球の軌跡の描画
}



# 関数デザイン

## メインルーチン()
{
 setup()
   キャンバス作成
   SimulationManagerインスタンス生成
     シミュレーションの初期設定
     球のインスタンス生成
     板のインスタンス生成
 draw()
   SimulationManagerのupdate()
     Boadインスタンスのupdate()
     全てのBallインスタンスのupdate()
   SimulationManagerのdraw()
     全てのBallのdraw()
}

関数デザイン

}


次の瞬間の位置を決定し描画する関数() {
  各球について実施 {
    各球にかかるｘ、ｙ方向の力を新しい板の傾きから算出し設定
    ｘ、ｙ方向の加速度からｘ、ｙ方向の球の速度を計算し球に設定
    ｘ、ｙ方向の次の位置を速度から算出
    現在の位置から、新しい位置までキャンバス上で軌跡を描画
  }
}
setup 関数() {
  キャンバスの作成
  SimulationManager のインスタンス生成
}



ファイルデザイン
 - sketch.js
 - constants.js
 - SimulationManager.js
 - Board.js
 - Ball.js

 
